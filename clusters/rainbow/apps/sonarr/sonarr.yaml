apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: sonarr
  namespace: argocd
  # Add this finalizer ONLY if you want these to cascade delete.
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default

  destination:
    server: https://kubernetes.default.svc
    namespace: vpn

  source:
    repoURL: https://k8s-at-home.com/charts
    targetRevision: 16.3.2

    chart: sonarr
    helm:
      values: |
        env:
          TZ: UTC
          SONARR__POSTGRES_HOST: 192.168.1.60
          SONARR__POSTGRES_MAIN_DB: sonarr-main
          SONARR__POSTGRES_LOG_DB: sonarr-log
          SONARR__POSTGRES_PASSWORD: sonarr
          SONARR__POSTGRES_USER: sonarr
        image:
          pullPolicy: IfNotPresent
          repository: ghcr.io/onedr0p/sonarr
          tag: rolling
        ingress:
          main:
            enabled: false
        initContainers:
          update-volume-permission:
            command:
            - sh
            - -c
            - chown -R 568:568 /config
            image: busybox
            securityContext:
              runAsUser: 0
            volumeMounts:
            - mountPath: /config
              name: config
        metrics:
          enabled: false
          exporter:
            env:
              additionalMetrics: false
              port: 9794
              unknownQueueItems: false
            image:
              pullPolicy: IfNotPresent
              repository: ghcr.io/onedr0p/exportarr
              tag: v1.0.0
          prometheusRule:
            enabled: false
            labels: {}
            rules: []
          serviceMonitor:
            interval: 3m
            labels: {}
            scrapeTimeout: 1m
        persistence:
          config:
            enabled: true
            existingClaim: sonarr-config
          downloads:
            enabled: true
            mountPath: /media
            type: custom
            volumeSpec:
              nfs:
                path: /volume1/Media
                server: 192.168.1.10
          media:
            enabled: false
            mountPath: /tv
            type: custom
            volumeSpec:
              nfs:
                path: /volume1/Media/tv
                server: 192.168.1.10
        probes:
          liveness:
            custom: true
            enabled: true
            spec:
              exec:
                command:
                - /usr/bin/env
                - bash
                - -c
                - curl --fail localhost:8989/api/v3/system/status?apiKey=`IFS=\> && while
                  read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done <
                  /config/config.xml`
              failureThreshold: 5
              initialDelaySeconds: 60
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 10
        service:
          main:
            ports:
              http:
                port: 8989
                targetPort: 8989
            type: NodePort
        
        